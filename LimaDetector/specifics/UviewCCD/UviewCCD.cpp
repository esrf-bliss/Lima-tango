static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         UviewCCD.cpp
//
// description :  C++ source for the UviewCCD and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                UviewCCD are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name      |  Method name
//	----------------------------------------
//  State             |  dev_state()
//  Status            |  dev_status()
//  SetIvsTROI        |  set_ivs_troi()
//  SetAverageImages  |  set_average_images()
//
//===================================================================


#include <tango.h>
#include <UviewCCD.h>
#include <UviewCCDClass.h>
#include <PogoHelper.h>

const short ROIid1 = 1;
const short ROIid2 = 2;
const short ROIid3 = 3;
const short ROIid4 = 4;
const short ROIid5 = 5;

const long slidingAverageMode = 1;
const long maxNbImagesAverage = 99;

namespace UviewCCD_ns
{

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::UviewCCD(string &s)
// 
// description : 	constructor for simulated UviewCCD
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
UviewCCD::UviewCCD(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

UviewCCD::UviewCCD(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

UviewCCD::UviewCCD(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void UviewCCD::delete_device()
{
    //	Delete device allocated objects
    DELETE_SCALAR_ATTRIBUTE(attr_ivsTRoi1_read);
    DELETE_SCALAR_ATTRIBUTE(attr_ivsTRoi2_read);
    DELETE_SCALAR_ATTRIBUTE(attr_ivsTRoi3_read);
    DELETE_SCALAR_ATTRIBUTE(attr_ivsTRoi4_read);
    DELETE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi1Inf_read);
    DELETE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi2Inf_read);
    DELETE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi3Inf_read);
    DELETE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi4Inf_read);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void UviewCCD::init_device()
{
	INFO_STREAM << "UviewCCD::UviewCCD() create device " << device_name << endl;

	
    // Initialise variables to default values
    //--------------------------------------------
  short zero = 0;
	CREATE_SCALAR_ATTRIBUTE(attr_ivsTRoi1_read);
    CREATE_SCALAR_ATTRIBUTE(attr_ivsTRoi2_read);
    CREATE_SCALAR_ATTRIBUTE(attr_ivsTRoi3_read);
    CREATE_SCALAR_ATTRIBUTE(attr_ivsTRoi4_read);
    CREATE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi1Inf_read		,MAX_LENGTH, zero);
    CREATE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi2Inf_read		,MAX_LENGTH, zero);
    CREATE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi3Inf_read		,MAX_LENGTH, zero);
    CREATE_SPECTRUM_ATTRIBUTE(attr_ivsTRoi4Inf_read		,MAX_LENGTH, zero);

    //-- INITIALIZE VARIABLES--//
    set_state(Tango::INIT);
    m_status_message.str("");
    m_roiId = "";
    m_is_device_initialized = false;
    m_is_acquiring = false;
    m_roi1Enable = false;
    m_roi2Enable = false;
    m_roi3Enable = false;
    m_roi4Enable = false;
  
    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("Uview");

        //- get interface to specific camera
        m_hw = dynamic_cast<Uview::Interface*>(m_ct->hwInterface());
        if(m_hw==0)
        {
            INFO_STREAM<<"Initialization Failed : Unable to get the interface of camera plugin "<<"("<<"Uview"<<") !"<< endl;
            m_status_message <<"Initialization Failed : Unable to get the interface of camera plugin "<<"("<<"Uview"<<") !"<< endl;
            m_is_device_initialized = false;
            set_state(Tango::FAULT);
            set_status(m_status_message.str());
            return;
        }
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());
       
		if(m_camera == 0)
		{
			INFO_STREAM<<"Initialization Failed : Unable to get the camera of plugin !"<<endl;
			m_status_message <<"Initialization Failed : Unable to get the camera object !"<< endl;
			m_is_device_initialized = false;
			set_state(Tango::FAULT);
            set_status(m_status_message.str());
			return;			
		}		
	
    }
    catch(Exception& e)
    {
        INFO_STREAM<<"Initialization Failed : "<<e.getErrMsg()<<endl;
        m_status_message <<"Initialization Failed : "<<e.getErrMsg( )<< endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        set_status(m_status_message.str());
        return;
    }
    catch(...)
    {
        INFO_STREAM<<"Initialization Failed : UNKNOWN"<<endl;
        m_status_message <<"Initialization Failed : UNKNOWN"<< endl;
        set_state(Tango::FAULT);
        set_status(m_status_message.str());
        m_is_device_initialized = false;
        return;
    }

	  //-- from UviewCCD plugin--//
    m_camera->m_ivs_roi_data_1_enable = false;
    m_camera->m_ivs_roi_data_2_enable = false;
    m_camera->m_ivs_roi_data_3_enable = false;
    m_camera->m_ivs_roi_data_4_enable = false;
	m_is_device_initialized = true;		
    set_state(Tango::STANDBY);
	set_status("Device initialized");
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void UviewCCD::always_executed_hook()
{

    if (m_is_device_initialized && m_camera->m_Acq_running)
    {      
		set_state(Tango::RUNNING);
        if (m_camera->m_ivs_roi_data_1_enable)
        *attr_ivsTRoi1_read = m_camera->checkIvsROIValues(ROIid1);
        if (m_camera->m_ivs_roi_data_2_enable)
        *attr_ivsTRoi2_read = m_camera->checkIvsROIValues(ROIid2);
        if (m_camera->m_ivs_roi_data_3_enable)
        *attr_ivsTRoi3_read = m_camera->checkIvsROIValues(ROIid3);
        if (m_camera->m_ivs_roi_data_4_enable)
        *attr_ivsTRoi4_read = m_camera->checkIvsROIValues(ROIid4);
    }
	else
		set_state(Tango::STANDBY);
}
//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "UviewCCD::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi1Inf
// 
// description : 	Extract real attribute values for ivsTRoi1Inf acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi1Inf(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi1Inf(Tango::Attribute &attr) entering... "<< endl;
    attr.set_value(attr_ivsTRoi1Inf_read, nbInf);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi2Inf
// 
// description : 	Extract real attribute values for ivsTRoi2Inf acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi2Inf(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi2Inf(Tango::Attribute &attr) entering... "<< endl;
    attr.set_value(attr_ivsTRoi2Inf_read, nbInf);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi3Inf
// 
// description : 	Extract real attribute values for ivsTRoi3Inf acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi3Inf(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi3Inf(Tango::Attribute &attr) entering... "<< endl;
    attr.set_value(attr_ivsTRoi3Inf_read, nbInf);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi4Inf
// 
// description : 	Extract real attribute values for ivsTRoi4Inf acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi4Inf(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi4Inf(Tango::Attribute &attr) entering... "<< endl;
    attr.set_value(attr_ivsTRoi4Inf_read, nbInf);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi1
// 
// description : 	Extract real attribute values for ivsTRoi1 acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi1(Tango::Attribute &attr) entering... "<< endl;
    
    if (!m_roi1Enable)
       *attr_ivsTRoi1_read = yat::IEEE_NAN;

    attr.set_value(attr_ivsTRoi1_read);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi2
// 
// description : 	Extract real attribute values for ivsTRoi2 acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi2(Tango::Attribute &attr) entering... "<< endl;

    if (!m_roi2Enable)
    *attr_ivsTRoi2_read = yat::IEEE_NAN;

    attr.set_value(attr_ivsTRoi2_read);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi3
// 
// description : 	Extract real attribute values for ivsTRoi3 acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi3(Tango::Attribute &attr) entering... "<< endl;

    if (!m_roi3Enable)
       *attr_ivsTRoi3_read = yat::IEEE_NAN;

    attr.set_value(attr_ivsTRoi3_read);
}

//+----------------------------------------------------------------------------
//
// method : 		UviewCCD::read_ivsTRoi4
// 
// description : 	Extract real attribute values for ivsTRoi4 acquisition result.
//
//-----------------------------------------------------------------------------
void UviewCCD::read_ivsTRoi4(Tango::Attribute &attr)
{
	DEBUG_STREAM << "UviewCCD::read_ivsTRoi4(Tango::Attribute &attr) entering... "<< endl;
    
    if (!m_roi4Enable)
       *attr_ivsTRoi4_read = yat::IEEE_NAN;

    attr.set_value(attr_ivsTRoi4_read);
}
//+------------------------------------------------------------------
/**
 *	method:	UviewCCD::set_ivs_troi
 *
 *	description:	method to execute "SetIvsTROI"
 *	[idRoi, origin_x, origin_y, width, height
 *
 * @param	argin	[idRoi, origin_x, origin_y, width, height]
 *
 */
//+------------------------------------------------------------------
void UviewCCD::set_ivs_troi(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "UviewCCD::set_ivs_troi(): entering... !" << endl;

	//	Add your own code to control device here
	//	Add your own code to control device here
    unsigned long colorNotUsed = 0; 
    //--If invalid number of parameters--//
    try
	{
		if (argin->length() != 5)
		{
			//- throw exception
			Tango::Except::throw_exception((const char*) ("TANGO_DEVICE_ERROR"),
										   (const char*) ("Invalid number of parameters. Check input parameters (roiID, x, y, width, height)\n"),
										   (const char*) ("UviewCCD::define_ivs_troi"));
		}
        else
        {
            short ROIid = (*argin)[0];
            short x = (*argin)[1];
            short y = (*argin)[2];
            short width = (*argin)[3];
            short height = (*argin)[4];     
           
            switch(ROIid)
            {
                case 1 : m_roi1Enable = true;
                     this->setIvsTROI( ROIid, colorNotUsed,  x, y,  width,  height);
                     //--To set info of IvsT ROI (x, y, width, height)--//
                     attr_ivsTRoi1Inf_read[0] = x;
                     attr_ivsTRoi1Inf_read[1] = y;
                     attr_ivsTRoi1Inf_read[2] = width;
                     attr_ivsTRoi1Inf_read[3] = height;
	            break;
                case 2 : m_roi2Enable = true;
                     this->setIvsTROI( ROIid, colorNotUsed,  x, y,  width,  height);
                     //--To set info of IvsT ROI (x, y, width, height)--//
                     attr_ivsTRoi2Inf_read[0] = x;
                     attr_ivsTRoi2Inf_read[1] = y;
                     attr_ivsTRoi2Inf_read[2] = width;
                     attr_ivsTRoi2Inf_read[3] = height;
	            break;
                case 3 : m_roi3Enable = true; 
                     this->setIvsTROI( ROIid, colorNotUsed,  x, y,  width,  height);
                     //--To set info of IvsT ROI (x, y, width, height)--//
                     attr_ivsTRoi3Inf_read[0] = x;
                     attr_ivsTRoi3Inf_read[1] = y;
                     attr_ivsTRoi3Inf_read[2] = width;
                     attr_ivsTRoi3Inf_read[3] = height;
	            break;
                case 4 : m_roi4Enable = true;
                     this->setIvsTROI( ROIid, colorNotUsed,  x, y,  width,  height);
                     //--To set info of IvsT ROI (x, y, width, height)--//
                     attr_ivsTRoi4Inf_read[0] = x;
                     attr_ivsTRoi4Inf_read[1] = y;
                     attr_ivsTRoi4Inf_read[2] = width;
                     attr_ivsTRoi4Inf_read[3] = height;
	            break;
                default : Tango::Except::throw_exception(
		                static_cast<const char*> ("TANGO_DEVICE_ERROR"),
		                static_cast<const char*> ("Wrong ROI ID"),
		                static_cast<const char*> ("UviewCCD::define_ivs_troi"));	
			}	
        }
    } 	
    catch (Tango::DevFailed& df)
    {
	    ERROR_STREAM << df << endl;
	    //- rethrow exception
	    Tango::Except::re_throw_exception(df,
									    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
									    static_cast<const char*> (string(df.errors[0].desc).c_str()),
									    static_cast<const char*> ("UviewCCD::define_ivs_troi"));
    }
    catch (Exception& e)
    {
	    ERROR_STREAM << e.getErrMsg() << endl;
	    //- throw exception
	    Tango::Except::throw_exception(
								    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
								    static_cast<const char*> (e.getErrMsg().c_str()),
								    static_cast<const char*> ("UviewCCD::define_ivs_troi"));
    }
}
//+------------------------------------------------------------------
/**
 *	method:	UviewCCD::setIvsTROI
 *
 *	description:	method to execute "setIvsTROI"
 *
 *
 */
//+------------------------------------------------------------------
void UviewCCD::setIvsTROI(short ROIid, unsigned long color, short x1, short 
                        y1, short x2, short y2)
{
    try
    {
        //--Calling function to set each IvsT ROI on camera object--//
        short response = m_camera-> setIvsTROI(ROIid, color, x1, y1, x2, y2);
        //--If response is -1, setIvsTROI didn't work--//
        if (response == -1)
        {
           Tango::Except::throw_exception(
		                static_cast<const char*> ("TANGO_DEVICE_ERROR"),
		                static_cast<const char*> ("Problem to set ROI"),
		                static_cast<const char*> ("UviewCCD::setIvsTROI"));
        }
        //--Else set status--//
        else
        {
            //--Stringstream used to convert ROIid into a string--//
            std::stringstream roiStringStream;
            roiStringStream << ROIid;

            if (m_roiId == "")
                m_roiId = roiStringStream.str();
            else
				if(m_roiId.find(roiStringStream.str())==std::string::npos)
				{
                m_roiId = m_roiId+" ,"+roiStringStream.str();               
				}
				 //--Set state/status--//
				set_status("ROI : " + m_roiId + " set..");
                set_state(Tango::STANDBY);
        }
     } 	
    catch (Tango::DevFailed& df)
    {
	    ERROR_STREAM << df << endl;
	    //- rethrow exception
	    Tango::Except::re_throw_exception(df,
									    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
									    static_cast<const char*> (string(df.errors[0].desc).c_str()),
									    static_cast<const char*> ("UviewCCD::setIvsTROI"));
    }
    catch (Exception& e)
    {
	    ERROR_STREAM << e.getErrMsg() << endl;
	    //- throw exception
	    Tango::Except::throw_exception(
								    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
								    static_cast<const char*> (e.getErrMsg().c_str()),
								    static_cast<const char*> ("UviewCCD::setIvsTROI"));
    }
}
//+------------------------------------------------------------------
/**
 *	method:	UviewCCD::set_average_images
 *
 *	description:	method to execute "SetAverageImages"
 *	Argin :
 *	0 no average,
 *	1 sliding average,
 *	1-99 :  nb image to average
 *
 * @param	argin	
 *
 */
//+------------------------------------------------------------------
void UviewCCD::set_average_images(Tango::DevLong argin)
{
	DEBUG_STREAM << "UviewCCD::set_average_images(): entering... !" << endl;

	//	Add your own code to control device here

	long value = argin;

	if (0 <= value &&  value <= maxNbImagesAverage) 
		m_camera->setAverage(value);
	else
	{
	    //- throw exception
	    Tango::Except::throw_exception(
								    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
								    static_cast<const char*> ("incorrect entry, must be between 0 and 99"),
								    static_cast<const char*> ("UviewCCD::set_average_images"));
	}


}


}	//	namespace
