/*----- PROTECTED REGION ID(Merlin.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Merlin.cpp
//
// description : C++ source for the Merlin class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Merlin are implemented in this file.
//
// project :     Merlin: A Medipix3RX Quad readout
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Merlin.h>
#include <MerlinClass.h>

using namespace lima;
using namespace lima::Merlin;
using namespace std;

/*----- PROTECTED REGION END -----*/	//	Merlin.cpp

/**
 *  Merlin class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  DevState      |  dev_state
//  SoftTrigger   |  soft_trigger
//  Abort         |  abort
//  THScan        |  thscan
//  ResetHW       |  reset_hw
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  softwareVersion       |  Tango::DevFloat	Scalar
//  chargeSumming         |  Tango::DevBoolean	Scalar
//  colourMode            |  Tango::DevBoolean	Scalar
//  continuousRW          |  Tango::DevBoolean	Scalar
//  counter               |  Tango::DevLong	Scalar
//  gain                  |  Tango::DevLong	Scalar
//  operatingEnergy       |  Tango::DevFloat	Scalar
//  temperature           |  Tango::DevFloat	Scalar
//  threshold0            |  Tango::DevFloat	Scalar
//  threshold1            |  Tango::DevFloat	Scalar
//  threshold2            |  Tango::DevFloat	Scalar
//  threshold3            |  Tango::DevFloat	Scalar
//  threshold4            |  Tango::DevFloat	Scalar
//  threshold5            |  Tango::DevFloat	Scalar
//  threshold6            |  Tango::DevFloat	Scalar
//  threshold7            |  Tango::DevFloat	Scalar
//  triggerStartType      |  Tango::DevLong	Scalar
//  triggerStopType       |  Tango::DevLong	Scalar
//  triggerOutTTL         |  Tango::DevLong	Scalar
//  triggerOutLVDS        |  Tango::DevLong	Scalar
//  triggerOutTTLInvert   |  Tango::DevLong	Scalar
//  triggerOutLVDSInvert  |  Tango::DevLong	Scalar
//  triggerOutTTLDelay    |  Tango::DevLong64	Scalar
//  triggerOutLVDSDelay   |  Tango::DevLong64	Scalar
//  triggerUseDelay       |  Tango::DevBoolean	Scalar
//  thScanNum             |  Tango::DevLong	Scalar
//  thStart               |  Tango::DevFloat	Scalar
//  thStop                |  Tango::DevFloat	Scalar
//  thStep                |  Tango::DevFloat	Scalar
//================================================================

namespace Merlin_ns
{
/*----- PROTECTED REGION ID(Merlin::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Merlin::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Merlin::Merlin()
 *	Description : Constructors for a Tango device
 *                implementing the classMerlin
 */
//--------------------------------------------------------
Merlin::Merlin(Tango::DeviceClass *cl, string &s)
 : Tango::Device_4Impl(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Merlin::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::constructor_1
}
//--------------------------------------------------------
Merlin::Merlin(Tango::DeviceClass *cl, const char *s)
 : Tango::Device_4Impl(cl, s)
{
	/*----- PROTECTED REGION ID(Merlin::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::constructor_2
}
//--------------------------------------------------------
Merlin::Merlin(Tango::DeviceClass *cl, const char *s, const char *d)
 : Tango::Device_4Impl(cl, s, d)
{
	/*----- PROTECTED REGION ID(Merlin::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Merlin::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Merlin::delete_device()
{
	DEBUG_STREAM << "Merlin::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::delete_device
	delete[] attr_softwareVersion_read;
	delete[] attr_chargeSumming_read;
	delete[] attr_colourMode_read;
	delete[] attr_continuousRW_read;
	delete[] attr_counter_read;
	delete[] attr_gain_read;
	delete[] attr_operatingEnergy_read;
	delete[] attr_temperature_read;
	delete[] attr_threshold0_read;
	delete[] attr_threshold1_read;
	delete[] attr_threshold2_read;
	delete[] attr_threshold3_read;
	delete[] attr_threshold4_read;
	delete[] attr_threshold5_read;
	delete[] attr_threshold6_read;
	delete[] attr_threshold7_read;
	delete[] attr_triggerStartType_read;
	delete[] attr_triggerStopType_read;
	delete[] attr_triggerOutTTL_read;
	delete[] attr_triggerOutLVDS_read;
	delete[] attr_triggerOutTTLInvert_read;
	delete[] attr_triggerOutLVDSInvert_read;
	delete[] attr_triggerOutTTLDelay_read;
	delete[] attr_triggerOutLVDSDelay_read;
	delete[] attr_triggerUseDelay_read;
	delete[] attr_thScanNum_read;
	delete[] attr_thStart_read;
	delete[] attr_thStop_read;
	delete[] attr_thStep_read;
}

//--------------------------------------------------------
/**
 *	Method      : Merlin::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Merlin::init_device()
{
	DEBUG_STREAM << "Merlin::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
    set_state(Tango::INIT);
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_softwareVersion_read = new Tango::DevFloat[1];
	attr_chargeSumming_read = new Tango::DevBoolean[1];
	attr_colourMode_read = new Tango::DevBoolean[1];
	attr_continuousRW_read = new Tango::DevBoolean[1];
	attr_counter_read = new Tango::DevLong[1];
	attr_gain_read = new Tango::DevLong[1];
	attr_operatingEnergy_read = new Tango::DevFloat[1];
	attr_temperature_read = new Tango::DevFloat[1];
	attr_threshold0_read = new Tango::DevFloat[1];
	attr_threshold1_read = new Tango::DevFloat[1];
	attr_threshold2_read = new Tango::DevFloat[1];
	attr_threshold3_read = new Tango::DevFloat[1];
	attr_threshold4_read = new Tango::DevFloat[1];
	attr_threshold5_read = new Tango::DevFloat[1];
	attr_threshold6_read = new Tango::DevFloat[1];
	attr_threshold7_read = new Tango::DevFloat[1];
	attr_triggerStartType_read = new Tango::DevLong[1];
	attr_triggerStopType_read = new Tango::DevLong[1];
	attr_triggerOutTTL_read = new Tango::DevLong[1];
	attr_triggerOutLVDS_read = new Tango::DevLong[1];
	attr_triggerOutTTLInvert_read = new Tango::DevLong[1];
	attr_triggerOutLVDSInvert_read = new Tango::DevLong[1];
	attr_triggerOutTTLDelay_read = new Tango::DevLong64[1];
	attr_triggerOutLVDSDelay_read = new Tango::DevLong64[1];
	attr_triggerUseDelay_read = new Tango::DevBoolean[1];
	attr_thScanNum_read = new Tango::DevLong[1];
	attr_thStart_read = new Tango::DevFloat[1];
	attr_thStop_read = new Tango::DevFloat[1];
	attr_thStep_read = new Tango::DevFloat[1];

	/*----- PROTECTED REGION ID(Merlin::init_device) ENABLED START -----*/
	
    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("Merlin");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Merlin::Interface*> (m_ct->hwInterface());
        if (m_hw == 0)
        {
            INFO_STREAM << "Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
            m_status_message << "Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
            m_is_device_initialized = false;
            set_state(Tango::FAULT);
            return;
        }

        //- get camera to specific detector
		m_camera = &(m_hw->getCamera());
		if(m_camera == 0)
		{
			INFO_STREAM<<"Initialization Failed : Unable to get the camera of plugin !"<<endl;
			m_status_message <<"Initialization Failed : Unable to get the camera object !"<< endl;
			m_is_device_initialized = false;
			set_state(Tango::FAULT);
			return;
		}

    }
    catch (Exception& e)
    {
        INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << std::endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << std::endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    this->dev_state();
	//	Initialize device
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Merlin::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Merlin::get_device_property()
{
	/*----- PROTECTED REGION ID(Merlin::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("HostName"));
	dev_prop.push_back(Tango::DbDatum("Port"));
	dev_prop.push_back(Tango::DbDatum("DataPort"));
	dev_prop.push_back(Tango::DbDatum("Chips"));
	dev_prop.push_back(Tango::DbDatum("ImageWidth"));
	dev_prop.push_back(Tango::DbDatum("ImageHeight"));
	dev_prop.push_back(Tango::DbDatum("Simulate"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on MerlinClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		MerlinClass	*ds_class =
			(static_cast<MerlinClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize HostName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  hostName;
		else {
			//	Try to initialize HostName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  hostName;
		}
		//	And try to extract HostName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  hostName;

		//	Try to initialize Port from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  port;
		else {
			//	Try to initialize Port from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  port;
		}
		//	And try to extract Port value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  port;

		//	Try to initialize DataPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dataPort;
		else {
			//	Try to initialize DataPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dataPort;
		}
		//	And try to extract DataPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dataPort;

		//	Try to initialize Chips from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  chips;
		else {
			//	Try to initialize Chips from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  chips;
		}
		//	And try to extract Chips value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  chips;

		//	Try to initialize ImageWidth from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  imageWidth;
		else {
			//	Try to initialize ImageWidth from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  imageWidth;
		}
		//	And try to extract ImageWidth value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  imageWidth;

		//	Try to initialize ImageHeight from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  imageHeight;
		else {
			//	Try to initialize ImageHeight from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  imageHeight;
		}
		//	And try to extract ImageHeight value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  imageHeight;

		//	Try to initialize Simulate from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  simulate;
		else {
			//	Try to initialize Simulate from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  simulate;
		}
		//	And try to extract Simulate value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  simulate;

	}

	/*----- PROTECTED REGION ID(Merlin::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
    create_property_if_empty(dev_prop,"no_name","HostName");
    create_property_if_empty(dev_prop,"6341","Port");
    create_property_if_empty(dev_prop,"6342","DataPort");
    create_property_if_empty(dev_prop,"4","Chips");
    create_property_if_empty(dev_prop,"512","ImageWidth");
    create_property_if_empty(dev_prop,"512","ImageHeight");
    create_property_if_empty(dev_prop,"false","Simulate");
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Merlin::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Merlin::always_executed_hook()
{
	INFO_STREAM << "Merlin::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::always_executed_hook) ENABLED START -----*/
    dev_state();

    /*----- PROTECTED REGION END -----*/	//	Merlin::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Merlin::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Merlin::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Merlin::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Merlin::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Merlin::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Merlin::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute softwareVersion related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_softwareVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_softwareVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_softwareVersion) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float version;
    	m_camera->getSoftwareVersion(version);
    	*attr_softwareVersion_read = version;
    	attr.set_value(attr_softwareVersion_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_softwareVersion"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_softwareVersion"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_softwareVersion
}
//--------------------------------------------------------
/**
 *	Read attribute chargeSumming related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_chargeSumming(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_chargeSumming(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_chargeSumming) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::Switch mode;
    	m_camera->getChargeSumming(mode);
    	*attr_chargeSumming_read = mode;
    	attr.set_value(attr_chargeSumming_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_chargeSumming"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_chargeSumming"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_chargeSumming
}
//--------------------------------------------------------
/**
 *	Write attribute chargeSumming related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_chargeSumming(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_chargeSumming(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_chargeSumming) ENABLED START -----*/
	try {
    	Camera::Switch mode = static_cast<Camera::Switch>(w_val);
		m_camera->setChargeSumming(mode);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_chargeSumming"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_chargeSumming"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_chargeSumming
}
//--------------------------------------------------------
/**
 *	Read attribute colourMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_colourMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_colourMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_colourMode) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::ColourMode mode;
    	m_camera->getColourMode(mode);
    	*attr_colourMode_read = mode;
    	attr.set_value(attr_colourMode_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_colourMode"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_colourMode"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_colourMode
}
//--------------------------------------------------------
/**
 *	Write attribute colourMode related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_colourMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_colourMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_colourMode) ENABLED START -----*/
	try {
    	Camera::ColourMode mode = static_cast<Camera::ColourMode>(w_val);
		m_camera->setColourMode(mode);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_colourMode"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_colourMode"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_colourMode
}
//--------------------------------------------------------
/**
 *	Read attribute continuousRW related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_continuousRW(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_continuousRW(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_continuousRW) ENABLED START -----*/
	//	Set the attribute value
	try {
    	Camera::Switch mode;
    	m_camera->getContinuousRW(mode);
    	*attr_continuousRW_read = mode;
    	attr.set_value(attr_continuousRW_read);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::read_continuousRW"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::read_continuousRW"));
	}
	attr.set_value(attr_continuousRW_read);
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_continuousRW
}
//--------------------------------------------------------
/**
 *	Write attribute continuousRW related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_continuousRW(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_continuousRW(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_continuousRW) ENABLED START -----*/
	try {
    	Camera::Switch mode = static_cast<Camera::Switch>(w_val);
		m_camera->setContinuousRW(mode);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_continuousRW"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_continuousRW"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_continuousRW
}
//--------------------------------------------------------
/**
 *	Read attribute counter related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_counter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_counter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_counter) ENABLED START -----*/
	//	Set the attribute value
	try {
    	m_camera->getEnableCounters((Camera::Counter&)*attr_counter_read);
    	attr.set_value(attr_counter_read);
 	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::read_continuousRW"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::read_continuousRW"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_counter
}
//--------------------------------------------------------
/**
 *	Write attribute counter related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_counter(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_counter(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_counter) ENABLED START -----*/
	try {
    	Camera::Counter mode = static_cast<Camera::Counter>(w_val);
		m_camera->setEnableCounters(mode);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_counter"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_counter"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_counter
}
//--------------------------------------------------------
/**
 *	Read attribute gain related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_gain) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::GainSetting gain;
    	m_camera->getGain(gain);
    	*attr_gain_read = gain;
    	attr.set_value(attr_gain_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_gain"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_gain"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_gain
}
//--------------------------------------------------------
/**
 *	Write attribute gain related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_gain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_gain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_gain) ENABLED START -----*/
	try {
    	Camera::GainSetting gain = static_cast<Camera::GainSetting>(w_val);
		m_camera->setGain(gain);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_gain"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_gain"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_gain
}
//--------------------------------------------------------
/**
 *	Read attribute operatingEnergy related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_operatingEnergy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_operatingEnergy(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_operatingEnergy) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float energy;
    	m_camera->getOperatingEnergy(energy);
    	*attr_operatingEnergy_read = energy;
    	attr.set_value(attr_operatingEnergy_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_operatingEnergy"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_operatingEnergy"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_operatingEnergy
}
//--------------------------------------------------------
/**
 *	Write attribute operatingEnergy related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_operatingEnergy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_operatingEnergy(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_operatingEnergy) ENABLED START -----*/
	try {
		m_camera->setOperatingEnergy(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_operatingEnergy"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_operatingEnergy"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_operatingEnergy
}
//--------------------------------------------------------
/**
 *	Read attribute temperature related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_temperature(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_temperature) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float temperature;
    	m_camera->getTemperature(temperature);
    	*attr_temperature_read = temperature;
    	attr.set_value(attr_temperature_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_temperature"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_temperature"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_temperature
}
//--------------------------------------------------------
/**
 *	Read attribute threshold0 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold0(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold0(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold0) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD0, threshold);
    	*attr_threshold0_read = threshold;
    	attr.set_value(attr_threshold0_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold0"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold0"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold0
}
//--------------------------------------------------------
/**
 *	Write attribute threshold0 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold0(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold0(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold0) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD0, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold0"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold0"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold0
}
//--------------------------------------------------------
/**
 *	Read attribute threshold1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold1) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD1, threshold);
    	*attr_threshold1_read = threshold;
    	attr.set_value(attr_threshold1_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold1"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold1"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold1
}
//--------------------------------------------------------
/**
 *	Write attribute threshold1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold1(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold1(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold1) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD1, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold1"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold1"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold1
}
//--------------------------------------------------------
/**
 *	Read attribute threshold2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold2) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD2, threshold);
    	*attr_threshold2_read = threshold;
    	attr.set_value(attr_threshold2_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold2"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold2"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold2
}
//--------------------------------------------------------
/**
 *	Write attribute threshold2 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold2(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold2(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold2) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD2, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold2"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold2"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold2
}
//--------------------------------------------------------
/**
 *	Read attribute threshold3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold3) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD3, threshold);
    	*attr_threshold3_read = threshold;
    	attr.set_value(attr_threshold3_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold3"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold3"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold3
}
//--------------------------------------------------------
/**
 *	Write attribute threshold3 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold3(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold3(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold3) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD3, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold3"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold3"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold3
}
//--------------------------------------------------------
/**
 *	Read attribute threshold4 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold4(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold4(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold4) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD4, threshold);
    	*attr_threshold4_read = threshold;
    	attr.set_value(attr_threshold4_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold4"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold4"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold4
}
//--------------------------------------------------------
/**
 *	Write attribute threshold4 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold4(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold4(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold4) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD4, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold4"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold4"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold4
}
//--------------------------------------------------------
/**
 *	Read attribute threshold5 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold5(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold5(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold5) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD5, threshold);
    	*attr_threshold5_read = threshold;
    	attr.set_value(attr_threshold5_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold5"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold5"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold5
}
//--------------------------------------------------------
/**
 *	Write attribute threshold5 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold5(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold5(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold5) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD5, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold5"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold5"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold5
}
//--------------------------------------------------------
/**
 *	Read attribute threshold6 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold6(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold6(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold6) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD6, threshold);
    	*attr_threshold6_read = threshold;
    	attr.set_value(attr_threshold6_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold6"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold6"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold6
}
//--------------------------------------------------------
/**
 *	Write attribute threshold6 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold6(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold6(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold6) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD6, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold6"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold6"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold6
}
//--------------------------------------------------------
/**
 *	Read attribute threshold7 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_threshold7(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_threshold7(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_threshold7) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float threshold;
    	m_camera->getThreshold(Camera::THRESHOLD7, threshold);
    	*attr_threshold7_read = threshold;
    	attr.set_value(attr_threshold7_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_threshold7"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_threshold7"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_threshold7
}
//--------------------------------------------------------
/**
 *	Write attribute threshold7 related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_threshold7(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_threshold7(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_threshold7) ENABLED START -----*/
	try {
    	m_camera->setThreshold(Camera::THRESHOLD7, w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_threshold7"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_threshold7"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_threshold7
}
//--------------------------------------------------------
/**
 *	Read attribute triggerStartType related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerStartType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerStartType(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerStartType) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::Trigger type;
    	m_camera->getTriggerStartType(type);
    	*attr_triggerStartType_read = type;
    	attr.set_value(attr_triggerStartType_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerStartType"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerStartType"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerStartType
}
//--------------------------------------------------------
/**
 *	Write attribute triggerStartType related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerStartType(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerStartType(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerStartType) ENABLED START -----*/
	try {
    	Camera::Trigger trigger = static_cast<Camera::Trigger>(w_val);
		m_camera->setTriggerStartType(trigger);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerStartType"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerStartType"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerStartType
}
//--------------------------------------------------------
/**
 *	Read attribute triggerStopType related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerStopType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerStopType(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerStopType) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::Trigger type;
    	m_camera->getTriggerStopType(type);
    	*attr_triggerStopType_read = type;
    	attr.set_value(attr_triggerStopType_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerStopType"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerStopType"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerStopType
}
//--------------------------------------------------------
/**
 *	Write attribute triggerStopType related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerStopType(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerStopType(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerStopType) ENABLED START -----*/
	try {
    	Camera::Trigger trigger = static_cast<Camera::Trigger>(w_val);
		m_camera->setTriggerStopType(trigger);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerStopType"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerStopType"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerStopType
}
//--------------------------------------------------------
/**
 *	Read attribute triggerOutTTL related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerOutTTL(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerOutTTL(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerOutTTL) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::TriggerOutput trigOut;
    	m_camera->getTriggerOutTTL(trigOut);
    	*attr_triggerOutTTL_read = trigOut;
    	attr.set_value(attr_triggerOutTTL_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerOutTTL"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerOutTTL"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerOutTTL
}
//--------------------------------------------------------
/**
 *	Write attribute triggerOutTTL related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerOutTTL(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerOutTTL(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerOutTTL) ENABLED START -----*/
	try {
    	Camera::TriggerOutput trigOut = static_cast<Camera::TriggerOutput>(w_val);
		m_camera->setTriggerOutTTL(trigOut);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerOutTTL"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerOutTTL"));
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerOutTTL
}
//--------------------------------------------------------
/**
 *	Read attribute triggerOutLVDS related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerOutLVDS(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerOutLVDS(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerOutLVDS) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::TriggerOutput trigOut;
    	m_camera->getTriggerOutTTL(trigOut);
    	*attr_triggerOutLVDS_read = trigOut;
    	attr.set_value(attr_triggerOutLVDS_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerOutLVDS"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerOutLVDS"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerOutLVDS
}
//--------------------------------------------------------
/**
 *	Write attribute triggerOutLVDS related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerOutLVDS(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerOutLVDS(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerOutLVDS) ENABLED START -----*/
	try {
    	Camera::TriggerOutput trigOut = static_cast<Camera::TriggerOutput>(w_val);
		m_camera->setTriggerOutLVDS(trigOut);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerOutLVDS"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerOutLVDS"));
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerOutLVDS
}
//--------------------------------------------------------
/**
 *	Read attribute triggerOutTTLInvert related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerOutTTLInvert(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerOutTTLInvert(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerOutTTLInvert) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::TriggerLevel level;
    	m_camera->getTriggerOutTTLInvert(level);
    	*attr_triggerOutTTLInvert_read = level;
    	attr.set_value(attr_triggerOutTTLInvert_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerOutTTLInvert"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerOutTTLInvert"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerOutTTLInvert
}
//--------------------------------------------------------
/**
 *	Write attribute triggerOutTTLInvert related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerOutTTLInvert(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerOutTTLInvert(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerOutTTLInvert) ENABLED START -----*/
	try {
    	Camera::TriggerLevel level = static_cast<Camera::TriggerLevel>(w_val);
		m_camera->setTriggerOutTTLInvert(level);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerOutTTLInvert"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerOutTTLInvert"));
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerOutTTLInvert
}
//--------------------------------------------------------
/**
 *	Read attribute triggerOutLVDSInvert related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerOutLVDSInvert(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerOutLVDSInvert(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerOutLVDSInvert) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::TriggerLevel level;
    	m_camera->getTriggerOutLVDSInvert(level);
    	*attr_triggerOutLVDSInvert_read = level;
    	attr.set_value(attr_triggerOutLVDSInvert_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerOutLVDSInvert"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerOutLVDSInvert"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerOutLVDSInvert
}
//--------------------------------------------------------
/**
 *	Write attribute triggerOutLVDSInvert related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerOutLVDSInvert(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerOutLVDSInvert(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerOutLVDSInvert) ENABLED START -----*/
	try {
    	Camera::TriggerLevel level = static_cast<Camera::TriggerLevel>(w_val);
		m_camera->setTriggerOutLVDSInvert(level);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerOutLVDSInvert"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerOutLVDSInvert"));
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerOutLVDSInvert
}
//--------------------------------------------------------
/**
 *	Read attribute triggerOutTTLDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerOutTTLDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerOutTTLDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerOutTTLDelay) ENABLED START -----*/
	//	Set the attribute value
    try {
    	long long delay;
    	m_camera->getTriggerOutTTLDelay(delay);
    	*attr_triggerOutTTLDelay_read = delay;
    	attr.set_value(attr_triggerOutTTLDelay_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerOutTTLDelay"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerOutTTLDelay"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerOutTTLDelay
}
//--------------------------------------------------------
/**
 *	Write attribute triggerOutTTLDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerOutTTLDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerOutTTLDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong64	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerOutTTLDelay) ENABLED START -----*/
	try {
		m_camera->setTriggerOutTTLDelay(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerOutTTLDelay"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerOutTTLDelay"));
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerOutTTLDelay
}
//--------------------------------------------------------
/**
 *	Read attribute triggerOutLVDSDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerOutLVDSDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerOutLVDSDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerOutLVDSDelay) ENABLED START -----*/
	//	Set the attribute value
    try {
    	long long delay;
    	m_camera->getTriggerOutLVDSDelay(delay);
    	*attr_triggerOutLVDSDelay_read = delay;
    	attr.set_value(attr_triggerOutLVDSDelay_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerOutLVDSDelay"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerOutLVDSDelay"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerOutLVDSDelay
}
//--------------------------------------------------------
/**
 *	Write attribute triggerOutLVDSDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerOutLVDSDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerOutLVDSDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong64	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerOutLVDSDelay) ENABLED START -----*/
	try {
		m_camera->setTriggerOutLVDSDelay(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerOutLVDSDelay"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerOutLVDSDelay"));
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerOutLVDSDelay
}
//--------------------------------------------------------
/**
 *	Read attribute triggerUseDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_triggerUseDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_triggerUseDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_triggerUseDelay) ENABLED START -----*/
	//	Set the attribute value
    try {
    	Camera::Switch mode;
    	m_camera->getTriggerUseDelay(mode);
    	*attr_triggerUseDelay_read = mode;
    	attr.set_value(attr_triggerUseDelay_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_triggerUseDelay"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_triggerUseDelay"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_triggerUseDelay
}
//--------------------------------------------------------
/**
 *	Write attribute triggerUseDelay related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_triggerUseDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_triggerUseDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_triggerUseDelay) ENABLED START -----*/
	try {
    	Camera::Switch mode = static_cast<Camera::Switch>(w_val);
		m_camera->setTriggerUseDelay(mode);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_triggerUseDelay"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_triggerUseDelay"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_triggerUseDelay
}
//--------------------------------------------------------
/**
 *	Read attribute thScanNum related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_thScanNum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_thScanNum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_thScanNum) ENABLED START -----*/
	//	Set the attribute value
    try {
    	int scanNum;
    	m_camera->getTHScanNum(scanNum);
    	*attr_thScanNum_read = scanNum;
    	attr.set_value(attr_thScanNum_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_thScanNum"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_thScanNum"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_thScanNum
}
//--------------------------------------------------------
/**
 *	Write attribute thScanNum related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_thScanNum(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_thScanNum(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_thScanNum) ENABLED START -----*/
	try {
		m_camera->setTHScanNum(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_thScanNum"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_thScanNum"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_thScanNum
}
//--------------------------------------------------------
/**
 *	Read attribute thStart related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_thStart(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_thStart(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_thStart) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float startKev;
    	m_camera->getTHStart(startKev);
    	*attr_thStart_read = startKev;
    	attr.set_value(attr_thStart_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_thStart"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_thStart"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_thStart
}
//--------------------------------------------------------
/**
 *	Write attribute thStart related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_thStart(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_thStart(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_thStart) ENABLED START -----*/
	try {
		m_camera->setTHStart(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_thStart"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_thStart"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_thStart
}
//--------------------------------------------------------
/**
 *	Read attribute thStop related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_thStop(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_thStop(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_thStop) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float stopKev;
    	m_camera->getTHStop(stopKev);
    	*attr_thStop_read = stopKev;
    	attr.set_value(attr_thStop_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_thStop"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_thStop"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_thStop
}
//--------------------------------------------------------
/**
 *	Write attribute thStop related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_thStop(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_thStop(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_thStop) ENABLED START -----*/
	try {
		m_camera->setTHStop(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_thStop"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_thStop"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_thStop
}
//--------------------------------------------------------
/**
 *	Read attribute thStep related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::read_thStep(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Merlin::read_thStep(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Merlin::read_thStep) ENABLED START -----*/
	//	Set the attribute value
    try {
    	float stepKev;
    	m_camera->getTHStep(stepKev);
    	*attr_thStep_read = stepKev;
    	attr.set_value(attr_thStep_read);
    } catch (Tango::DevFailed& df) {
        ERROR_STREAM << df << endl;
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("Merlin::read_thStep"));
    } catch (Exception& e) {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("Unknown exception caught."),
                                       static_cast<const char*> ("Merlin::read_thStep"));
    }
	/*----- PROTECTED REGION END -----*/	//	Merlin::read_thStep
}
//--------------------------------------------------------
/**
 *	Write attribute thStep related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Merlin::write_thStep(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Merlin::write_thStep(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Merlin::write_thStep) ENABLED START -----*/
	try {
		m_camera->setTHStep(w_val);
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::write_thStep"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::write_thStep"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::write_thStep
}

//--------------------------------------------------------
/**
 *	Method      : Merlin::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Merlin::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Merlin::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	INFO_STREAM << "No dynamic attributes to add";
	/*----- PROTECTED REGION END -----*/	//	Merlin::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command DevState related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevState Merlin::dev_state()
{
	Tango::DevState argout;
	DEBUG_STREAM << "Merlin::DevState()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::dev_state) ENABLED START -----*/
	stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized) {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    } else {
        //state&status are retrieved from specific device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }
    set_state(DeviceState);
    set_status(DeviceStatus.str());
    argout = DeviceState;
	/*----- PROTECTED REGION END -----*/	//	Merlin::dev_state
	return argout;
}
//--------------------------------------------------------
/**
 *	Command SoftTrigger related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Merlin::soft_trigger()
{
	DEBUG_STREAM << "Merlin::SoftTrigger()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::soft_trigger) ENABLED START -----*/
	try {
		m_camera->softTrigger();
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::SoftTrigger"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::SoftTrigger"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::soft_trigger
}
//--------------------------------------------------------
/**
 *	Command Abort related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Merlin::abort()
{
	DEBUG_STREAM << "Merlin::Abort()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::abort) ENABLED START -----*/
	try {
		m_camera->abort();
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::Abort"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::Abort"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::abort
}
//--------------------------------------------------------
/**
 *	Command THScan related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Merlin::thscan()
{
	DEBUG_STREAM << "Merlin::THScan()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::thscan) ENABLED START -----*/
	try {
		m_camera->thscan();
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::THScan"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::THScan"));
	}
	/*----- PROTECTED REGION END -----*/	//	Merlin::thscan
}
//--------------------------------------------------------
/**
 *	Command ResetHW related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Merlin::reset_hw()
{
	DEBUG_STREAM << "Merlin::ResetHW()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Merlin::reset_hw) ENABLED START -----*/
	try {
		m_camera->resetHw();
	} catch (Tango::DevFailed& df) {
		ERROR_STREAM << df << endl;
		Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> ("Merlin::ResetHW"));
	} catch (Exception& e) {
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> ("Unknown exception caught."),
                                   static_cast<const char*> ("Merlin::ResetHW"));
	}
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Merlin::reset_hw
}

/*----- PROTECTED REGION ID(Merlin::namespace_ending) ENABLED START -----*/

/*-------------------------------------------------------------------------
// Merlin::create_property_if_empty
/-------------------------------------------------------------------------*/
template <class T>
void Merlin::create_property_if_empty(Tango::DbData& dev_prop,T value,string property_name)
{
    int iPropertyIndex = find_index_from_property_name(dev_prop,property_name);
    if (iPropertyIndex == -1) return;
    if (dev_prop[iPropertyIndex].is_empty())
    {
        Tango::DbDatum current_value(dev_prop[iPropertyIndex].name);
        current_value << value;
        Tango::DbData db_data;
        db_data.push_back(current_value);

        try
        {
            get_db_device()->put_property(db_data);
        }
        catch(Tango::DevFailed &df)
        {
            string message= "Error in storing " + property_name + " in Configuration DataBase ";
            LOG_ERROR((message));
            ERROR_STREAM<<df<<endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                        static_cast<const char*> ("Merlin::create_property_if_empty"));
        }
    }
}


/*-------------------------------------------------------------------------
// Merlin::find_index_from_property_name
/-------------------------------------------------------------------------*/
int Merlin::find_index_from_property_name(Tango::DbData& dev_prop, string property_name)
{
    size_t iNbProperties = dev_prop.size();
    unsigned int i;
    for (i=0;i<iNbProperties;i++)
    {
        string sPropertyName(dev_prop[i].name);
        if (sPropertyName == property_name) return i;
    }
    if (i == iNbProperties) return -1;
    return i;
}

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Merlin::namespace_ending
} //	namespace
